import os
import json
from datetime import datetime, timedelta
from google.cloud.firestore_v1 import AsyncClient
from google.oauth2 import service_account

# üîê Carregar e preparar as credenciais
firebase_credentials = os.getenv("FIREBASE_CREDENTIALS")

if not firebase_credentials:
    raise ValueError("‚ùå Vari√°vel FIREBASE_CREDENTIALS n√£o encontrada!")

try:
    firebase_credentials = firebase_credentials.replace('\\"', '"').replace('\\\\n', '\\n')
    credentials_dict = json.loads(firebase_credentials)
except Exception as e:
    raise ValueError(f"Erro ao processar credenciais do Firebase: {e}")

credentials = service_account.Credentials.from_service_account_info(credentials_dict)

# ‚ú® Cliente ass√≠ncrono do Firestore com credenciais
client = AsyncClient(credentials=credentials, project=credentials.project_id)

# üîÅ Utilit√°rio para navegar at√© o path
def get_ref_from_path(path: str):
    partes = path.split("/")
    ref = client
    for i in range(len(partes)):
        if i % 2 == 0:
            ref = ref.collection(partes[i])
        else:
            ref = ref.document(partes[i])
    return ref

async def verificar_firebase():
    try:
        print("üîç Verificando conex√£o com Firebase...")
        # Por exemplo, buscar uma cole√ß√£o qualquer s√≥ pra validar conex√£o
        dados = await buscar_dados("Usuarios")  # ou outro caminho v√°lido
        print("‚úÖ Firebase verificado com sucesso.")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao verificar Firebase: {e}")
        return False

# ‚úÖ Buscar cliente (documento)
async def buscar_cliente(user_id):
    try:
        doc_ref = client.collection("Clientes").document(str(user_id))
        doc = await doc_ref.get()
        if doc.exists:
            return doc.to_dict()
        return None
    except Exception as e:
        print(f"‚ùå Erro ao buscar cliente: {e}")
        return None

# ‚úÖ Buscar subcole√ß√£o (ex: Clientes/{id}/Tarefas)
async def buscar_subcolecao(path: str):
    try:
        ref = get_ref_from_path(path)
        partes = path.split("/")
        resultados = {}

        if len(partes) % 2 == 1:  # subcole√ß√£o
            docs = ref.stream()
            async for doc in docs:
                data = doc.to_dict()
                print(f"üìÑ Documento encontrado em {path}/{doc.id}: {data}")
                resultados[doc.id] = data
        else:
            doc = await ref.get()
            if doc.exists:
                print(f"üìÑ Documento √∫nico em {path}: {doc.to_dict()}")
                resultados = doc.to_dict()
        return resultados
    except Exception as e:
        print(f"‚ùå Erro ao buscar subcole√ß√£o '{path}': {e}")
        return {}

# ‚úÖ Buscar tarefas do usu√°rio
async def buscar_tarefas_do_usuario(user_id: str):
    try:
        path = f"Clientes/{user_id}/Tarefas"
        print(f"üîé Buscando tarefas do usu√°rio em: {path}")
        tarefas = await buscar_subcolecao(path)
        print(f"üìã Tarefas encontradas: {tarefas}")
        return tarefas
    except Exception as e:
        print(f"‚ùå Erro ao buscar tarefas do usu√°rio {user_id}: {e}")
        return {}

# ‚úÖ Buscar tarefas por descri√ß√£o
async def buscar_tarefa_por_descricao(user_id: str, descricao: str):
    tarefas = await buscar_tarefas_do_usuario(user_id)
    for id_tarefa, dados in tarefas.items():
        if dados.get("descricao", "").lower() == descricao.lower():
            print(f"‚úÖ Tarefa encontrada: {id_tarefa} -> {dados}")
            return {id_tarefa: dados}
    print("üîç Nenhuma tarefa encontrada com essa descri√ß√£o.")
    return {}

# ‚úÖ Salvar dados em path (ex: Clientes/{id}/Eventos/{id})
async def salvar_dado_em_path(path: str, dados: dict):
    try:
        ref = get_ref_from_path(path)
        await ref.set(dados)
        print(f"‚úÖ Dados salvos em: {path}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao salvar no caminho '{path}': {e}")
        return False

# ‚úÖ Atualizar dados com merge
async def atualizar_dado_em_path(path: str, dados: dict):
    try:
        ref = get_ref_from_path(path)
        await ref.set(dados, merge=True)
        print(f"‚úÖ Dados atualizados (merge) em: {path}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao atualizar (merge) no caminho '{path}': {e}")
        return False

# ‚úÖ Deletar dado por path
async def deletar_dado_em_path(path: str):
    try:
        ref = get_ref_from_path(path)
        await ref.delete()
        print(f"üóëÔ∏è Dado deletado de: {path}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao deletar no caminho '{path}': {e}")
        return False

# ‚úÖ Limpar cole√ß√£o inteira
async def limpar_colecao(colecao: str):
    try:
        docs = client.collection(colecao).stream()
        async for doc in docs:
            await client.collection(colecao).document(doc.id).delete()
        print(f"‚úÖ Todos os documentos da cole√ß√£o '{colecao}' foram removidos!")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao limpar a cole√ß√£o '{colecao}': {e}")
        return False

# ‚úÖ Buscar todos os documentos de uma cole√ß√£o (ass√≠ncrono)
async def buscar_dados(colecao: str):
    try:
        docs = client.collection(colecao).stream()
        resultados = [doc.to_dict() async for doc in docs]
        return resultados
    except Exception as e:
        print(f"‚ùå Erro ao buscar dados da cole√ß√£o '{colecao}': {e}")
        return []

# ‚úÖ Salvar dados do cliente (com merge)
async def salvar_cliente(user_id: str, dados: dict):
    try:
        ref = client.collection("Clientes").document(user_id)
        await ref.set(dados, merge=True)
        print(f"‚úÖ Cliente {user_id} salvo com sucesso.")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao salvar cliente: {e}")
        return False

# ‚úÖ Salvar dados em uma cole√ß√£o (gera ID autom√°tico)
async def salvar_dados(colecao: str, dados: dict):
    try:
        await client.collection(colecao).add(dados)
        print(f"‚úÖ Documento salvo em '{colecao}' com dados: {dados}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao salvar dados na cole√ß√£o '{colecao}': {e}")
        return False

# ‚úÖ Buscar dado em path (documento)
async def buscar_dado_em_path(path: str):
    try:
        ref = get_ref_from_path(path)
        doc = await ref.get()
        return doc.to_dict() if doc.exists else None
    except Exception as e:
        print(f"‚ùå Erro ao buscar dado em '{path}': {e}")
        return None

# ‚úÖ Buscar todos os clientes (ass√≠ncrono)
async def buscar_todos_clientes():
    try:
        docs = client.collection("Clientes").stream()
        resultados = {doc.id: doc.to_dict() async for doc in docs}
        return resultados
    except Exception as e:
        print(f"‚ùå Erro ao buscar todos os clientes: {e}")
        return {}

# ‚úÖ Salvar evento em cole√ß√£o global (opcional)
async def salvar_evento(evento_data):
    try:
        await client.collection("Eventos").add(evento_data)
        print("‚úÖ Evento salvo na cole√ß√£o global.")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao salvar evento global: {e}")
        return False


