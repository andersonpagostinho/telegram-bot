from unidecode import unidecode
from services.profissional_service import buscar_profissionais_por_servico
from services.firebase_service_async import buscar_subcolecao
import re
import string

async def responder_consulta_informativa(mensagem: str, user_id: str) -> str | None:
    mensagem_normalizada = unidecode(mensagem.lower().strip())

    # üìå Listar todos os servi√ßos dispon√≠veis
    if "servi" in mensagem_normalizada and ("oferec" in mensagem_normalizada or "tem" in mensagem_normalizada):
        profissionais = (await buscar_subcolecao(f"Clientes/{user_id}/Profissionais")) or {}
        servicos_set = set()
        for p in profissionais.values():
            for serv in p.get("servicos", []):
                servicos_set.add(serv.lower().strip())
        if servicos_set:
            lista = "\n".join([f"‚Ä¢ {s.capitalize()}" for s in sorted(servicos_set)])
            return f"‚ú® Servi√ßos oferecidos atualmente:\n\n{lista}"
        return "‚ùå Nenhum servi√ßo foi encontrado no sistema."

    # üë• Quem faz determinado servi√ßo
    if "quem faz" in mensagem_normalizada or "qual profissional" in mensagem_normalizada:
        palavras = mensagem_normalizada.split()
        termo_busca = palavras[-1] if palavras else ""
        profissionais = await buscar_profissionais_por_servico([termo_busca], user_id)
        if profissionais:
            nomes = "\n".join([f"‚Ä¢ {p}" for p in profissionais])
            return f"üë• Profissionais que fazem *{termo_busca}*:\n\n{nomes}"
        return f"‚ùå Nenhum profissional encontrado para o servi√ßo *{termo_busca}*."

    # üí∞ Pre√ßo de determinado servi√ßo ou tabela completa
    palavras_chave_preco = [
        "quanto custa", "qual o valor", "qual √© o valor", "qual √© o pre√ßo", "pre√ßo",
        "valor", "quanto", "cobra", "custa", "quero saber o valor de", "quero saber o valor da",
        "quero saber quanto custa", "valores", "todos os valores", "tabela de pre√ßos", 
        "pre√ßos dos servi√ßos", "valores dos servi√ßos", "me traga todos os valores"
    ]

    if any(p in mensagem_normalizada for p in palavras_chave_preco):
        profissionais = (await buscar_subcolecao(f"Clientes/{user_id}/Profissionais")) or {}
        profissionais = profissionais.values()

        # Verifica se o usu√°rio pediu TODOS OS VALORES
        if "todos os valores" in mensagem_normalizada or "me traga todos os valores" in mensagem_normalizada \
            or "tabela de pre√ßos" in mensagem_normalizada or "valores dos servi√ßos" in mensagem_normalizada \
            or "pre√ßos dos servi√ßos" in mensagem_normalizada or (mensagem_normalizada.strip() == "valores"):
            
            respostas = []
            for p in profissionais:
                nome = p.get("nome", "Profissional")
                precos = p.get("precos", {})
                for servico, preco in precos.items():
                    respostas.append(f"‚Ä¢ {servico.capitalize()} com {nome}: R$ {preco}")
            if respostas:
                return f"üí∞ Tabela completa de valores:\n\n" + "\n".join(respostas)
            else:
                return "‚ùå N√£o encontrei pre√ßos cadastrados para nenhum servi√ßo."

        # Caso seja pergunta por servi√ßo espec√≠fico
        padrao = r"(?:quanto custa|qual o valor|qual √© o valor|qual √© o pre√ßo|pre√ßo|valor|quanto|cobra|custa|quero saber o valor de|quero saber o valor da|quero saber quanto custa)?\s*(?:o|a|uma|um)?\s*(.*)"
        match = re.search(padrao, mensagem_normalizada)
        termo = match.group(1).strip() if match else ""

        # Limpa pontua√ß√µes
        termo = termo.translate(str.maketrans('', '', string.punctuation)).strip()

        # Remove artigos finais se ainda houver
        termo = re.sub(r"^(o|a|uma|um)\s+", "", termo).strip()

        # Tokeniza√ß√£o do termo para compara√ß√£o inteligente
        termo_tokens = set(unidecode(termo.lower()).split())

        respostas = []
        for p in profissionais:
            nome = p.get("nome", "Profissional")
            precos = p.get("precos", {})
            for servico, preco in precos.items():
                servico_tokens = set(unidecode(servico.lower()).split())
                if termo_tokens & servico_tokens:  # se houver interse√ß√£o de palavras
                    respostas.append(f"‚Ä¢ {servico.capitalize()} com {nome}: R$ {preco}")

        if respostas:
            return f"üí∞ Valores encontrados:\n\n" + "\n".join(respostas)
        return "‚ùå N√£o encontrei pre√ßos para esse servi√ßo."

    return None  # Se n√£o for uma inten√ß√£o informativa
